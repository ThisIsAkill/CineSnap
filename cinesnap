#!/bin/bash

# Check if FFmpeg is installed
command -v ffmpeg >/dev/null 2>&1 || { echo >&2 "FFmpeg is required but not installed. Aborting."; exit 1; }

# Check if a video file is provided as an argument
if [ -z "$1" ]; then
  echo "Usage: $0 <video_file> [-ts <interval> | -tsfile <timestamps_file>]"
  echo "Example: $0 path/to/video.mp4 -ts 10"
  echo "         $0 path/to/video.mp4 -tsfile timestamps.txt"
  exit 1
fi

# Get the video file name without extension
filename=$(basename "$1")

# Set the output directory path
dirname="/path/to/output/directory/${filename%.*}"

# Create the directory structure if it doesn't exist
mkdir -p "$dirname"

# Check if -ts or -tsfile argument is provided
if [ "$2" == "-ts" ]; then
  if [ -z "$3" ]; then
    echo "Please provide an interval for -ts argument."
    exit 1
  fi

  # Calculate the extraction interval
  interval=$3

  # Get video duration in seconds
  duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$1")
  duration=${duration%.*}

  # Counter for frame numbering
  frame_number=1

  # Array to store frame numbers, video timestamps (in frames), and video durations (hh:mm:ss)
  frame_numbers=()
  video_timestamps=()
  video_durations=()

  # Use FFmpeg to extract frames based on the provided interval
  for ((timestamp = 0; timestamp < duration; timestamp += interval)); do
    # Extract the current frame with a pause before capturing
    ffmpeg -ss "$timestamp" -i "$1" -vframes 1 "$dirname/frame_$frame_number.jpg"

    # Store frame number with image name and extension
    frame_name="frame_$frame_number.jpg"
    frame_numbers+=("$frame_name")

    # Store video timestamp (in frames)
    video_timestamps+=("$timestamp")

    ((frame_number++))

    # Pause for 1 second before grabbing the next frame
    sleep 1
  done

  # Convert video durations to hh:mm:ss format
  total_duration=$(date -u -d @$duration +"%T")
  for ((i = 0; i < frame_number - 1; i++)); do
    video_duration=$(date -u -d @${video_timestamps[i]} +"%T")
    video_durations+=("$video_duration")
  done

  # Generate the timestamps text file
  timestamps_file="$dirname/extracted_frames_timestamps.txt"
  echo "Frame Number, Video Timestamp (in frames), Video Duration (hh:mm:ss)" > "$timestamps_file"
  for ((i = 0; i < frame_number - 1; i++)); do
    echo "${frame_numbers[i]}, ${video_timestamps[i]}, ${video_durations[i]}" >> "$timestamps_file"
  done

  echo "Frames extracted successfully in the directory: $dirname"
  echo "Extracted frames timestamps and video durations (hh:mm:ss) saved in: $timestamps_file"

elif [ "$2" == "-tsfile" ]; then
  if [ -z "$3" ]; then
    echo "Please provide a timestamps file for -tsfile argument."
    exit 1
  fi

  # Check if the specified timestamps file exists
  if [ ! -f "$3" ]; then
    echo "The specified timestamps file does not exist."
    exit 1
  fi

  # Counter for frame numbering
  frame_number=1

  # Read timestamps from the file and extract frames accordingly
  IFS=$'\r\n' GLOBIGNORE='*' command eval 'timestamps=($(cat "$3"))'
  for timestamp in "${timestamps[@]}"; do
    # Extract the current frame with a pause before capturing
    ffmpeg -ss "$timestamp" -i "$1" -vframes 1 "$dirname/frame_$frame_number.jpg"
    ((frame_number++))

    # Pause for 1 second before grabbing the next frame
    sleep 1
  done

  echo "Frames extracted successfully in the directory: $dirname"

else
  echo "Invalid argument. Please use either -ts or -tsfile."
  exit 1
fi
